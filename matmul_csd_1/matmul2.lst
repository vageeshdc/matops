     1                                  ;assignment 1
     2                                  ;CSD course
     3                                  ;author: vageesh
     4                                  ;
     5                                  ;Info : a matrix multiplication implementation
     6                                  
     7                                  section .data
     8 00000000 737570207468657265-     	msg: db "sup there",16
     9 00000009 10                 
    10                                  	len: equ $-msg
    11                                  
    12 0000000A 0C000000F3E0010013-     	arr: dd 12,123123,2323,454,234,3434,324
    13 00000013 090000C6010000EA00-
    14 0000001C 00006A0D0000440100-
    15 00000025 00                 
    16                                  	
    17 00000026 010000000200000003-     	arr2: dd 1,2,3,4
    18 0000002F 00000004000000     
    19 00000036 000000000000000000-     	arr3: dd 0,0,0,0
    20 0000003F 00000000000000     
    21                                  
    22 00000046 796F202564206E756D-     	format: db "yo %d num",10,0
    23 0000004F 0A00               
    24                                  	
    25 00000051 00000000                	loop_i: dd 0
    26 00000055 00000000                	loop_j: dd 0
    27                                  	
    28 00000059 00000000                	aVec: dd 0
    29 0000005D 00000000                	bVec: dd 0
    30                                  
    31                                  section .text:
    32                                  	global main
    33                                  	extern printf
    34                                  
    35                                  main:
    36 00000000 50                          push eax
    37                                  
    38 00000001 B802000000              	mov eax,2
    39 00000006 50                      	push eax
    40 00000007 B8[26000000]            	mov eax,arr2
    41                                  
    42 0000000C 50                      	push eax
    43 0000000D 50                      	push eax
    44                                  
    45 0000000E E8F5000000              	call add_mat_2d
    46                                  
    47 00000013 B801000000              	mov eax,1
    48 00000018 BB00000000              	mov ebx,0
    49 0000001D CD80                    	int 80h
    50                                  
    51                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    52                                  
    53                                  mult_mat_2d:
    54                                  	
    55                                  	;args a[],b[],n,C[] -- the sol
    56 0000001F 8B44240C                	mov eax,[esp+12]
    57 00000023 2D01000000              	sub eax,1
    58                                  
    59 00000028 A3[51000000]            	mov dword [loop_i],eax
    60 0000002D A3[55000000]            	mov dword [loop_j],eax
    61                                  	;done with setting loop variables
    62                                  	;push and pop eax for counter ops
    63                                  
    64                                  out_1:
    65                                  
    66                                  	;outer loop
    67                                  out_2:
    68                                  
    69                                  	;inner loop
    70                                  
    71 00000032 A1[55000000]            	mov eax,[loop_j]
    72 00000037 69C004000000            	imul eax,4
    73 0000003D 03442408                	add eax,[esp+8]
    74 00000041 A3[5D000000]            	mov dword [bVec],eax
    75                                  
    76 00000046 A1[51000000]            	mov eax,[loop_i]
    77 0000004B 0FAF44240C              	imul eax,[esp+12]
    78 00000050 69C004000000            	imul eax,4
    79 00000056 03442404                	add eax,[esp+4]
    80 0000005A A3[59000000]            	mov dword [aVec],eax
    81                                  	
    82                                  	;;;row ops here...
    83                                  	
    84 0000005F BB00000000              	mov ebx,0
    85 00000064 8B4C240C                	mov ecx,[esp+12]
    86 00000068 81E901000000            	sub ecx,1
    87                                  out_3:	
    88 0000006E 89C8                    	mov eax,ecx
    89 00000070 0FAF44240C              	imul eax,[esp+12]
    90 00000075 69C004000000            	imul eax,4
    91 0000007B 0305[5D000000]          	add dword eax,[bVec]
    92 00000081 8B10                    	mov edx,[eax]
    93                                  
    94 00000083 A1[59000000]            	mov eax,[aVec]
    95 00000088 51                      	push ecx
    96 00000089 69C904000000            	imul ecx,4
    97 0000008F 01C8                    	add eax,ecx
    98 00000091 59                      	pop ecx
    99                                  
   100 00000092 0FAF10                  	imul edx,[eax]
   101 00000095 01D3                    	add ebx,edx
   102 00000097 81E901000000            	sub ecx,1
   103                                  	
   104 0000009D 81F900000000            	cmp ecx,0
   105 000000A3 7DC9                    	jge out_3
   106                                  
   107                                  out_3_exit:
   108                                  	
   109                                      ;;;end of row op...
   110                                  	
   111 000000A5 89DA                    	mov edx,ebx
   112                                  
   113 000000A7 A1[51000000]            	mov eax,[loop_i]
   114 000000AC 0FAF44240C              	imul eax,[esp+12]
   115 000000B1 8B1D[55000000]          	mov ebx,[loop_j]
   116 000000B7 01D8                    	add eax,ebx
   117 000000B9 69C004000000            	imul eax,4
   118 000000BF 03442410                	add eax,[esp+16]
   119 000000C3 8910                    	mov [eax],edx
   120                                  	
   121 000000C5 A1[55000000]            	mov eax,[loop_j]
   122 000000CA 2D01000000              	sub eax,1
   123 000000CF A3[55000000]            	mov dword [loop_j],eax
   124                                  
   125 000000D4 3D00000000              	cmp eax,0
   126                                  
   127 000000D9 0F8D53FFFFFF            	jge out_2
   128                                  
   129                                  out_2_end:
   130                                  
   131                                  
   132 000000DF 8B44240C                	mov eax,[esp+12]
   133 000000E3 2D01000000              	sub eax,1
   134 000000E8 A3[55000000]            	mov dword [loop_j],eax
   135                                  
   136 000000ED A1[51000000]            	mov eax,[loop_i]
   137 000000F2 2D01000000              	sub eax,1
   138 000000F7 A3[51000000]            	mov [loop_i],eax
   139                                  
   140 000000FC 3D00000000              	cmp eax,0
   141                                  
   142 00000101 0F8D2BFFFFFF            	jge out_1
   143                                  
   144                                  out_1_end:
   145                                  
   146 00000107 C3                      	ret;
   147                                  	;end of the procedure
   148                                  
   149                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   150                                  
   151                                  add_mat_2d:
   152                                  	;arr A[],B[],n,C[]
   153                                  
   154 00000108 8B44240C                	mov eax,[esp+12]
   155 0000010C 2D01000000              	sub eax,1
   156                                  
   157 00000111 A3[51000000]            	mov [loop_i],eax
   158 00000116 A3[55000000]            	mov [loop_j],eax
   159                                  
   160                                  out_1a:
   161                                  	
   162                                  out_2a:
   163                                  	
   164                                  	;;addition logic
   165                                  	
   166                                  	;find offset
   167 0000011B 8B1D[51000000]          	mov ebx,[loop_i]
   168 00000121 0FAF5C240C              	imul ebx,[esp+12]
   169 00000126 031D[55000000]          	add ebx,[loop_j]
   170 0000012C 69DB04000000            	imul ebx,4
   171                                  
   172                                  	;get B[]
   173 00000132 8B4C2408                	mov ecx,[esp+8]
   174 00000136 01D9                    	add ecx,ebx
   175 00000138 8B01                    	mov eax,[ecx]
   176                                  
   177                                  	;add A[]
   178 0000013A 8B4C2404                	mov ecx,[esp+4]
   179 0000013E 01D9                    	add ecx,ebx
   180 00000140 0301                    	add eax,[ecx]
   181                                  
   182                                  	;store to C[]
   183 00000142 8B4C2410                	mov ecx,[esp+16]
   184 00000146 01D9                    	add ecx,ebx
   185 00000148 8901                    	mov [ecx],eax
   186                                  
   187                                  	;;end of addition
   188                                  
   189 0000014A A1[55000000]            	mov eax,[loop_j]
   190 0000014F 2D01000000              	sub eax,1
   191 00000154 A3[55000000]            	mov [loop_j],eax
   192                                  
   193 00000159 3D00000000              	cmp eax,0
   194 0000015E 0F8DCEFEFFFF            	jge out_2
   195                                  
   196                                  out_2a_end:
   197                                  	
   198 00000164 8B44240C                	mov eax,[esp+12]
   199 00000168 2D01000000              	sub eax,1
   200 0000016D A3[55000000]            	mov [loop_j],eax
   201                                  
   202 00000172 A1[51000000]            	mov eax,[loop_i]
   203 00000177 2D01000000              	sub eax,1
   204 0000017C A3[51000000]            	mov [loop_i],eax
   205                                  
   206 00000181 3D00000000              	cmp eax,0
   207 00000186 0F8DA6FEFFFF            	jge out_1
   208                                  
   209                                  out_1a_end:
   210                                  
   211 0000018C C3                      	ret;
   212                                  	;end of addition
   213                                  
   214                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
